<div class="card mb-4 shadow-sm" id="review-filters">
    <div class="card-header bg-info text-white">
        <div class="d-flex align-items-center">
            <i class="bi bi-funnel me-2"></i>
            <h5 class="mb-0">Review Filters</h5>
        </div>
    </div>
    <div class="card-body">
        <EditForm Model="@FilterFormModel" OnValidSubmit="@ApplyFilters">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="row">
                <div class="col-md-3">
                    <label for="filterSelect" class="form-label">
                        Filter Type:
                        <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                           title="Recent: sorted by creation time. Updated: sorted by last updated time."></i>
                    </label>
                    <InputSelect id="filterSelect" @bind-Value="FilterFormModel.FilterType" class="form-select">
                        <option value="@Filter.Recent">Recent</option>
                        <option value="@Filter.Updated">Updated</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => FilterFormModel.FilterType)"/>
                </div>

                <div class="col-md-3">
                    <label for="reviewTypeSelect" class="form-label">
                        Review Type:
                        <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                           title="Filter reviews by recommendation type."></i>
                    </label>
                    <InputSelect id="reviewTypeSelect" @bind-Value="FilterFormModel.ReviewType" class="form-select">
                        <option value="@ReviewType.All">All Reviews</option>
                        <option value="@ReviewType.Positive">Positive Only</option>
                        <option value="@ReviewType.Negative">Negative Only</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => FilterFormModel.ReviewType)"/>
                </div>

                <div class="col-md-3">
                    <label class="form-label">
                        Languages:
                        <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                           title="Select languages for reviews to display. Click to select/deselect."></i>
                    </label>
                    <div class="language-selector">
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="allLanguages"
                                   checked="@FilterFormModel.SelectedLanguages.Contains("All")"
                                   @onchange="ToggleAllLanguages"/>
                            <label class="form-check-label fw-bold" for="allLanguages">
                                All Languages
                            </label>
                        </div>
                        <div class="language-options"
                             style="max-height: 120px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 0.5rem;">
                            @foreach (var lang in Enum.GetValues<Language>())
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="lang_@lang"
                                           checked="@FilterFormModel.SelectedLanguages.Contains(lang.ToString())"
                                           disabled="@FilterFormModel.SelectedLanguages.Contains("All")"
                                           @onchange="@(() => ToggleLanguage(lang.ToString()))"/>
                                    <label class="form-check-label" for="lang_@lang">
                                        @GetLanguageDisplayName(lang)
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    <ValidationMessage For="@(() => FilterFormModel.SelectedLanguages)"/>
                </div>

            </div>

            <div class="row mt-3">
                <div class="col-md-3">
                    <label for="numPerPageInput" class="form-label">
                        Reviews per Page:
                        <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                           title="Number of reviews to fetch per request (1-100). 100 is recommended for faster operation."></i>
                    </label>
                    <InputNumber id="numPerPageInput" @bind-Value="FilterFormModel.NumPerPage" class="form-control"
                                 min="1" max="100"/>
                    @if (FilterFormModel.NumPerPage < 100)
                    {
                        <div class="alert alert-warning mt-2 mb-0" style="padding: 0.5rem;">
                            <small><i class="bi bi-exclamation-triangle me-1"></i>Fetching will take longer
                                with @FilterFormModel.NumPerPage reviews per page. 100 is recommended for faster
                                operation.</small>
                        </div>
                    }
                    <ValidationMessage For="@(() => FilterFormModel.NumPerPage)"/>
                </div>

                <div class="col-md-3">
                    <label for="purchaseTypeSelect" class="form-label">
                        Purchase Type:
                        <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                           title="Filter by how users purchased the game."></i>
                    </label>
                    <InputSelect id="purchaseTypeSelect" @bind-Value="FilterFormModel.PurchaseType" class="form-select">
                        <option value="@PurchaseType.All">All Purchases</option>
                        <option value="@PurchaseType.Steam">Steam Purchase</option>
                        <option value="@PurchaseType.Non_Steam_Purchase">Non-Steam Purchase</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => FilterFormModel.PurchaseType)"/>
                </div>

                <div class="col-md-3">
                    <div class="form-check mt-4">
                        <InputCheckbox id="filterOffTopicCheck" @bind-Value="FilterFormModel.FilterOffTopicActivity"
                                       class="form-check-input"/>
                        <label for="filterOffTopicCheck" class="form-check-label">
                            Filter Off-Topic Activity
                            <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                               title="Exclude review bombs and off-topic reviews."></i>
                        </label>
                    </div>
                    <ValidationMessage For="@(() => FilterFormModel.FilterOffTopicActivity)"/>
                </div>

                <div class="col-md-3">
                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary me-2" disabled="@IsApplyingFilters">
                            @if (IsApplyingFilters)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Apply Filters
                        </button>
                        <button type="button" @onclick="ResetFilters" class="btn btn-secondary"
                                disabled="@IsApplyingFilters">
                            @if (IsApplyingFilters)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Reset to Default
                        </button>
                    </div>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter] public SteamReviewQueryParameters FilterParameters { get; set; } = new();
    [Parameter] public EventCallback<SteamReviewQueryParameters> FilterParametersChanged { get; set; }

    private FilterFormModel FilterFormModel { get; set; } = new();
    private bool IsApplyingFilters { get; set; } = false;

    protected override void OnParametersSet()
    {
        LoadCurrentFilters();
    }

    private void LoadCurrentFilters()
    {
        FilterFormModel.FilterType = FilterParameters.Filter;
        FilterFormModel.ReviewType = FilterParameters.ReviewType;
        FilterFormModel.SelectedLanguages = FilterParameters.Languages?.Select(l => l.ToString()).ToArray() ?? ["All"];
        FilterFormModel.NumPerPage = FilterParameters.NumPerPage;
        FilterFormModel.PurchaseType = FilterParameters.PurchaseType;
        FilterFormModel.FilterOffTopicActivity = FilterParameters.FilterOffTopicActivity;
    }


    private async Task ApplyFilters()
    {
        try
        {
            IsApplyingFilters = true;
            await InvokeAsync(StateHasChanged);

            FilterParameters.Filter = FilterFormModel.FilterType;
            FilterParameters.ReviewType = FilterFormModel.ReviewType;

            // Handle language selection - if "All" is selected, use all languages
            if (FilterFormModel.SelectedLanguages.Contains("All"))
            {
                FilterParameters.Languages = null;
            }
            else
            {
                FilterParameters.Languages = FilterFormModel.SelectedLanguages
                    .Where(l => l != "All" && Enum.TryParse<Language>(l, out _))
                    .Select(Enum.Parse<Language>)
                    .ToArray();
            }

            FilterParameters.NumPerPage = FilterFormModel.NumPerPage;
            FilterParameters.PurchaseType = FilterFormModel.PurchaseType;
            FilterParameters.FilterOffTopicActivity = FilterFormModel.FilterOffTopicActivity;

            await FilterParametersChanged.InvokeAsync(FilterParameters);
        }
        finally
        {
            IsApplyingFilters = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetFilters()
    {
        try
        {
            IsApplyingFilters = true;
            await InvokeAsync(StateHasChanged);

            FilterFormModel = new FilterFormModel();

            await ApplyFilters();
        }
        finally
        {
            IsApplyingFilters = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private static string GetLanguageDisplayName(Language language)
    {
        var field = language.GetType().GetField(language.ToString());
        var attribute = field?.GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() as DisplayAttribute;
        return attribute?.Name ?? language.ToString();
    }

    private void ToggleAllLanguages()
    {
        bool wasAllToggled = FilterFormModel.SelectedLanguages.Contains("All");
        FilterFormModel.SelectedLanguages = wasAllToggled ? [] : ["All"];
    }

    private void ToggleLanguage(string language)
    {
        var currentLanguages = FilterFormModel.SelectedLanguages.ToList();

        if (currentLanguages.Contains(language))
        {
            currentLanguages.Remove(language);
        }
        else
        {
            currentLanguages.Add(language);
        }

        // If all individual languages are selected, switch to "All"
        string[] allIndividualLanguages = Enum.GetValues<Language>().Select(l => l.ToString()).ToArray();
        FilterFormModel.SelectedLanguages = allIndividualLanguages.All(lang => currentLanguages.Contains(lang)) ? ["All"] : currentLanguages.ToArray();
    }

}
